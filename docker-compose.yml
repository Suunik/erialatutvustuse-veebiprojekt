services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: always
    ports:
      - "3000:3000"
    develop:
      watch:
        - action: rebuild
          path: ./frontend/tailwind.config.ts
        - action: rebuild
          path: ./frontend/next.config.js
        - action: rebuild
          path: ./frontend/package.json
  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "${POSTGRES_PORT}:5432" # Expose PostgreSQL port to host  
  backend:
    container_name: backend
    working_dir: /backend
    build:
      context: ./backend
      args:
        PORT: 8080
    volumes:
      - ./backend:/backend
      - ./backend/databaseData:/backend/databaseData
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER} 
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy